; SPDX-License-Identifier: BUSL-1.1
; Copyright Â© 2021 Fragcolor Pte. Ltd.

(defnode root)

(defchain verify-utility
  "contracts/Utility.sol"  (FS.Read) = .Utility.sol
  "contracts/RezProxy.sol" (FS.Read) = .RezProxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/Proxy.sol" (FS.Read) = .Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" (FS.Read) = .Initializable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Strings.sol" (FS.Read) = .Strings.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/Utility.sol" {"content" .Utility.sol}
              "contracts/RezProxy.sol" {"content" .RezProxy.sol}
              "openzeppelin-solidity/contracts/proxy/Proxy.sol" {"content" .Proxy.sol}
              "openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" {"content" .Initializable.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/utils/Strings.sol" {"content" .Strings.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-utility.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-utility)

(defchain verify-entity
  "contracts/Entity.sol"  (FS.Read) = .Entity.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" (FS.Read) = .Initializable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Counters.sol" (FS.Read) = .Counters.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Strings.sol" (FS.Read) = .Strings.sol
  "node_modules/openzeppelin-solidity/contracts/utils/cryptography/ECDSA.sol" (FS.Read) = .ECDSA.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" (FS.Read) = .IERC20.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" (FS.Read) = .SafeERC20.sol
  "node_modules/openzeppelin-solidity/contracts/utils/structs/EnumerableSet.sol" (FS.Read) = .EnumerableSet.sol
  "node_modules/openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" (FS.Read) = .IERC165.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" (FS.Read) = .IERC721.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol" (FS.Read) = .ERC721.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol" (FS.Read) = .IERC721Receiver.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol" (FS.Read) = .IERC721Metadata.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol" (FS.Read) = .IERC721Enumerable.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol" (FS.Read) = .ERC721Enumerable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Context.sol" (FS.Read) = .Context.sol
  "node_modules/openzeppelin-solidity/contracts/utils/introspection/ERC165.sol" (FS.Read) = .ERC165.sol
  "contracts/IFragment.sol" (FS.Read) = .IFragment.sol
  "contracts/IVault.sol" (FS.Read) = .IVault.sol
  "contracts/IUtility.sol" (FS.Read) = .IUtility.sol
  "contracts/RoyaltiesReceiver.sol" (FS.Read) = .RoyaltiesReceiver.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/Entity.sol" {"content" .Entity.sol}
              "openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" {"content" .Initializable.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/utils/Counters.sol" {"content" .Counters.sol}
              "openzeppelin-solidity/contracts/utils/Strings.sol" {"content" .Strings.sol}
              "openzeppelin-solidity/contracts/utils/cryptography/ECDSA.sol" {"content" .ECDSA.sol}
              "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" {"content" .IERC20.sol}
              "openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" {"content" .SafeERC20.sol}
              "openzeppelin-solidity/contracts/utils/structs/EnumerableSet.sol" {"content" .EnumerableSet.sol}
              "openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" {"content" .IERC165.sol}
              "openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" {"content" .IERC721.sol}
              "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol" {"content" .ERC721.sol}
              "openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol" {"content" .IERC721Receiver.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol" {"content" .IERC721Metadata.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol" {"content" .IERC721Enumerable.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol" {"content" .ERC721Enumerable.sol}
              "openzeppelin-solidity/contracts/utils/Context.sol" {"content" .Context.sol}
              "openzeppelin-solidity/contracts/utils/introspection/ERC165.sol" {"content" .ERC165.sol}
              "contracts/IFragment.sol" {"content" .IFragment.sol}
              "contracts/IVault.sol" {"content" .IVault.sol}
              "contracts/IUtility.sol" {"content" .IUtility.sol}
              "contracts/RoyaltiesReceiver.sol" {"content" .RoyaltiesReceiver.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-entity.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-entity)

(defchain verify-vault
  "contracts/Vault.sol"  (FS.Read) = .Vault.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" (FS.Read) = .Initializable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" (FS.Read) = .IERC20.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" (FS.Read) = .SafeERC20.sol
  "node_modules/openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" (FS.Read) = .IERC165.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" (FS.Read) = .IERC721.sol
  "contracts/IFragment.sol" (FS.Read) = .IFragment.sol
  "contracts/IEntity.sol" (FS.Read) = .IEntity.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/Vault.sol" {"content" .Vault.sol}
              "openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" {"content" .Initializable.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" {"content" .IERC20.sol}
              "openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" {"content" .SafeERC20.sol}
              "openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" {"content" .IERC165.sol}
              "openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" {"content" .IERC721.sol}
              "contracts/IFragment.sol" {"content" .IFragment.sol}
              "contracts/IEntity.sol" {"content" .IEntity.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-vault.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-vault)

(defchain verify-admin
  "contracts/FragmentProxyAdmin.sol" (FS.Read) = .FragmentProxyAdmin.sol
  "contracts/Ownable.sol" (FS.Read) = .Ownable.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/Proxy.sol" (FS.Read) = .Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/ERC1967/ERC1967Proxy.sol" (FS.Read) = .ERC1967Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/transparent/TransparentUpgradeableProxy.sol" (FS.Read) = .TransparentUpgradeableProxy.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/FragmentProxyAdmin.sol" {"content" .FragmentProxyAdmin.sol}
              "contracts/Ownable.sol" {"content" .Ownable.sol}
              "openzeppelin-solidity/contracts/proxy/Proxy.sol" {"content" .Proxy.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/proxy/ERC1967/ERC1967Proxy.sol" {"content" .ERC1967Proxy.sol}
              "openzeppelin-solidity/contracts/proxy/transparent/TransparentUpgradeableProxy.sol" {"content" .TransparentUpgradeableProxy.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-admin.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-admin)

(defchain verify-proxy
  "contracts/FragmentProxy.sol" (FS.Read) = .FragmentProxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/Proxy.sol" (FS.Read) = .Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/ERC1967/ERC1967Proxy.sol" (FS.Read) = .ERC1967Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/transparent/TransparentUpgradeableProxy.sol" (FS.Read) = .TransparentUpgradeableProxy.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/FragmentProxy.sol" {"content" .FragmentProxy.sol}
              "openzeppelin-solidity/contracts/proxy/Proxy.sol" {"content" .Proxy.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/proxy/ERC1967/ERC1967Proxy.sol" {"content" .ERC1967Proxy.sol}
              "openzeppelin-solidity/contracts/proxy/transparent/TransparentUpgradeableProxy.sol" {"content" .TransparentUpgradeableProxy.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-proxy.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-proxy)

(defchain verify-fragment
  "contracts/Fragment.sol" (FS.Read) = .Fragment.sol
  "contracts/Ownable.sol" (FS.Read) = .Ownable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Create2.sol" (FS.Read) = .Create2.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" (FS.Read) = .Initializable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Counters.sol" (FS.Read) = .Counters.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Strings.sol" (FS.Read) = .Strings.sol
  "node_modules/openzeppelin-solidity/contracts/utils/cryptography/ECDSA.sol" (FS.Read) = .ECDSA.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" (FS.Read) = .IERC20.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" (FS.Read) = .SafeERC20.sol
  "node_modules/openzeppelin-solidity/contracts/utils/structs/EnumerableSet.sol" (FS.Read) = .EnumerableSet.sol
  "node_modules/openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" (FS.Read) = .IERC165.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" (FS.Read) = .IERC721.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol" (FS.Read) = .ERC721.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol" (FS.Read) = .IERC721Receiver.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol" (FS.Read) = .IERC721Metadata.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol" (FS.Read) = .IERC721Enumerable.sol
  "node_modules/openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol" (FS.Read) = .ERC721Enumerable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Context.sol" (FS.Read) = .Context.sol
  "node_modules/openzeppelin-solidity/contracts/utils/introspection/ERC165.sol" (FS.Read) = .ERC165.sol
  "contracts/IVault.sol" (FS.Read) = .IVault.sol
  "contracts/IUtility.sol" (FS.Read) = .IUtility.sol
  "contracts/RoyaltiesReceiver.sol" (FS.Read) = .RoyaltiesReceiver.sol
  "contracts/IEntity.sol" (FS.Read) = .IEntity.sol
  "contracts/IRezProxy.sol" (FS.Read) = .IRezProxy.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/Fragment.sol" {"content" .Fragment.sol}
              "contracts/Ownable.sol" {"content" .Ownable.sol}
              "openzeppelin-solidity/contracts/utils/Create2.sol" {"content" .Create2.sol}
              "openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" {"content" .Initializable.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              "openzeppelin-solidity/contracts/utils/Counters.sol" {"content" .Counters.sol}
              "openzeppelin-solidity/contracts/utils/Strings.sol" {"content" .Strings.sol}
              "openzeppelin-solidity/contracts/utils/cryptography/ECDSA.sol" {"content" .ECDSA.sol}
              "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol" {"content" .IERC20.sol}
              "openzeppelin-solidity/contracts/token/ERC20/utils/SafeERC20.sol" {"content" .SafeERC20.sol}
              "openzeppelin-solidity/contracts/utils/structs/EnumerableSet.sol" {"content" .EnumerableSet.sol}
              "openzeppelin-solidity/contracts/utils/introspection/IERC165.sol" {"content" .IERC165.sol}
              "openzeppelin-solidity/contracts/token/ERC721/IERC721.sol" {"content" .IERC721.sol}
              "openzeppelin-solidity/contracts/token/ERC721/ERC721.sol" {"content" .ERC721.sol}
              "openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol" {"content" .IERC721Receiver.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol" {"content" .IERC721Metadata.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol" {"content" .IERC721Enumerable.sol}
              "openzeppelin-solidity/contracts/token/ERC721/extensions/ERC721Enumerable.sol" {"content" .ERC721Enumerable.sol}
              "openzeppelin-solidity/contracts/utils/Context.sol" {"content" .Context.sol}
              "openzeppelin-solidity/contracts/utils/introspection/ERC165.sol" {"content" .ERC165.sol}
              "contracts/IVault.sol" {"content" .IVault.sol}
              "contracts/IUtility.sol" {"content" .IUtility.sol}
              "contracts/RoyaltiesReceiver.sol" {"content" .RoyaltiesReceiver.sol}
              "contracts/IEntity.sol" {"content" .IEntity.sol}
              "contracts/IRezProxy.sol" {"content" .IRezProxy.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-fragment.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-fragment)

(defchain verify-rezproxy
  "contracts/RezProxy.sol" (FS.Read) = .RezProxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/Proxy.sol" (FS.Read) = .Proxy.sol
  "node_modules/openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" (FS.Read) = .Initializable.sol
  "node_modules/openzeppelin-solidity/contracts/utils/Address.sol" (FS.Read) = .Address.sol
  {"language" "Solidity"
   "settings" {"optimizer" {"enabled" true
                            "runs" 1}}
   "sources" {"contracts/RezProxy.sol" {"content" .RezProxy.sol}
              "openzeppelin-solidity/contracts/proxy/Proxy.sol" {"content" .Proxy.sol}
              "openzeppelin-solidity/contracts/proxy/utils/Initializable.sol" {"content" .Initializable.sol}
              "openzeppelin-solidity/contracts/utils/Address.sol" {"content" .Address.sol}
              ;
              }}
  (ToJson) = .jstr
  "verify-rezproxy.json" (FS.Write .jstr :Overwrite true))

(schedule root verify-rezproxy)

(run root)

